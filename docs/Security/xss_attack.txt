First: Understand XSS Types
XSS type	Where it happens	Example fix
Reflected	API response echoes user input	Escape/encode output
Stored	Chat message, username stored in DB and served later	Sanitize before storing or escaping before rendering
DOM-based	React/Vue manipulating DOM unsafely	Never use innerHTML

Your backend prevents the first two.

‚ùå  1. Use Security Headers (Important) GATEWAY

Install fastify-helmet (CSP support included):
npm i @fastify/helmet

app.register(import('@fastify/helmet'), {
	contentSecurityPolicy: {
		directives: {
			defaultSrc: ["'self'"],
			scriptSrc: ["'self'"],
			objectSrc: ["'none'"],
			baseUri: ["'self'"],
		},
	},
});
This blocks injected <script> from running, even if it appears.

‚ùå  2. Store JWT in HttpOnly cookies AUTH SERVICE

Your API gateway should set:

reply.setCookie("token", jwt, {
	httpOnly: true,
	secure: true,
	sameSite: "lax",
	path: "/",
});
This prevents XSS from stealing the token.

‚ùå  3. Sanitize User-Generated Input MICROSERVICES DB

Install sanitizer:
npm i sanitize-html

Example:
import sanitize from "sanitize-html";
function cleanInput(text) {
	return sanitize(text, {
		allowedTags: [],     // remove all HTML tags
		allowedAttributes: {},
	});
}

Use before storing to DB:
const safeUsername = cleanInput(input.username);

‚úÖ 4. Never return raw HTML unless absolutely required MICROSERVICES ROUTES

Your API responses should be JSON only:
reply.send({ username: safeUsername });

No string HTML pages ‚Üí no attack surface.

‚úÖ 5. Validate and Restrict Input Schemas MICROSERVICES ROUTES
Fastify has built-in JSON schema validation:
{
	body: {
		type: "object",
		properties: {
			username: { type: "string", minLength: 1, maxLength: 32 },
		},
		required: ["username"]
	}
}
This prevents big payload attacks or weird input.

‚úÖ 6. Protect DB from Injection (safe queries) MICROSERVICES DB

If you're using SQLite/Postgres ‚Äî always parametrize:
db.run("SELECT * FROM users WHERE id = ?", [id]);

Never:
db.run("SELECT * FROM users WHERE id = " + id);

‚ùå  7. Important: XSS Is Mainly Defeated in the FRONTEND 

Frontends must:
Never use innerHTML or v-html or dangerouslySetInnerHTML
Always encode text before injecting into DOM
If you're using React, you're already mostly safe unless you manually break it.

üß† Summary
API Gateway	Set cookies HttpOnly + Secure + SameSite
Backend (Fastify)	Use fastify-helmet, sanitize input, validate schemas, parametrize SQL
Frontend	Encode output & avoid innerHTML
Database	Do not store raw HTML unless absolutely necessary